# QUICK SORT

#include<stdio.h>
#include<time.h>

void quicksort(int number[25],int first,int last){
   int i, j, pivot, temp;
   if(first<last){
      pivot=first;
      i=first;
      j=last;

      while(i<j){
         while(number[i]<=number[pivot]&&i<last)
            i++;
         while(number[j]>number[pivot])
            j--;
         if(i<j){
            temp=number[i];
            number[i]=number[j];
            number[j]=temp;
         }
      }

      temp=number[pivot];
      number[pivot]=number[j];
      number[j]=temp;
      quicksort(number,first,j-1);
      quicksort(number,j+1,last);

   }
}

int main(){
   int i, count;
   clock_t start, end;
   printf("How many elements are u going to enter?: ");
   scanf("%d",&count);
   int number[count];
   printf("Given array is \n");
   for(i=0;i<count;i++){
      number[i]=rand()%1000;
      printf("%d ", number[i]);
   }
   start=clock();
   quicksort(number,0,count-1);
   for(i=0;i<8000000;i++);
   end=clock();
   printf("\nOrder of Sorted elements: \n");
   for(i=0;i<count;i++)
      printf("%d ",number[i]);
   printf("\n Time taken to sort %d numbers is %f Secs",count, (((double)(end-start))/CLOCKS_PER_SEC));
   return 0;
}

#MERGE SORT

#include <stdio.h>
#include <stdlib.h>
#include<time.h>

void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];

    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r)
{

    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void printArray(int A[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}

int main()
{
    int arr_size,i;
    clock_t start, end;
    printf("enter the array size\n");
    scanf("%d",&arr_size);
    int arr[arr_size];
    for(i=0;i<arr_size;i++)
    {
        arr[i]=rand()%1000;
    }
    printf("Given array is \n");
    printArray(arr, arr_size);
    start=clock();
    mergeSort(arr, 0, arr_size - 1);
    for(i=0;i<8000000;i++);
    end=clock();
    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    printf("\n Time taken to sort %d numbers is %f Secs",arr_size, (((double)(end-start))/CLOCKS_PER_SEC));
    return 0;
}
